from typing import Optional, Pattern, Tuple, Union, List


class Version:
    version_re: Pattern[str] = ...
    partial_version_re: Pattern[str] = ...
    major: int = ...
    minor: Optional[int] = ...
    patch: Optional[int] = ...
    prerelease: Optional[Tuple[str, ...]] = ...
    build: Optional[Tuple[str, ...]] = ...
    partial: bool = ...

    def __init__(
        self,
        version_string: Optional[str] = ...,
        major: Optional[int] = ...,
        minor: Optional[int] = ...,
        patch: Optional[int] = ...,
        prerelease: Optional[Union[List[str], Tuple[str, ...]]] = ...,
        build: Optional[Union[List[str], Tuple[str, ...]]] = ...,
        partial: bool = ...,
    ) -> None: ...
    def next_major(self) -> "Version": ...
    def next_minor(self) -> "Version": ...
    def next_patch(self) -> "Version": ...
    def truncate(self, level: str = ...) -> "Version": ...
